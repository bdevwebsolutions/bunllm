# TypeScript Documentation Reference

## Basic Types

```typescript
// Primitive Types
let isDone: boolean = false;
let decimal: number = 6;
let color: string = "blue";
let list: number[] = [1, 2, 3];
let tuple: [string, number] = ["hello", 10];
let notSure: unknown = 4;
let unusable: void = undefined;
let u: undefined = undefined;
let n: null = null;
let neverReturns: never = (() => { throw new Error('Exception'); })();
let someValue: any = "this is a string";
```

## Type Assertions

```typescript
let someValue: unknown = "this is a string";
let strLength: number = (someValue as string).length;
let strLength2: number = (<string>someValue).length;
```

## Interfaces

```typescript
interface LabeledValue {
  label: string;
}

interface SquareConfig {
  color?: string;
  width?: number;
  [propName: string]: any;
}

interface SearchFunc {
  (source: string, subString: string): boolean;
}

interface StringArray {
  [index: number]: string;
}

interface ClockInterface {
  currentTime: Date;
  setTime(d: Date): void;
}

class Clock implements ClockInterface {
  currentTime: Date = new Date();
  setTime(d: Date) {
    this.currentTime = d;
  }
}

interface Shape {
  color: string;
}

interface PenStroke {
  penWidth: number;
}

interface Square extends Shape, PenStroke {
  sideLength: number;
}
```

## Classes

```typescript
class Greeter {
  greeting: string;
  
  constructor(message: string) {
    this.greeting = message;
  }
  
  greet() {
    return "Hello, " + this.greeting;
  }
}

class Animal {
  name: string;
  constructor(theName: string) { 
    this.name = theName; 
  }
  move(distanceInMeters: number = 0) {
    console.log(`${this.name} moved ${distanceInMeters}m.`);
  }
}

class Snake extends Animal {
  constructor(name: string) { 
    super(name); 
  }
  move(distanceInMeters = 5) {
    console.log("Slithering...");
    super.move(distanceInMeters);
  }
}

// Access Modifiers
class Animal2 {
  private name: string;
  protected species: string;
  public age: number;
  readonly numberOfLegs: number = 4;
  
  constructor(theName: string) { 
    this.name = theName; 
  }
}

// Abstract Classes
abstract class Department {
  constructor(public name: string) {}
  
  printName(): void {
    console.log("Department name: " + this.name);
  }
  
  abstract printMeeting(): void;
}
```

## Functions

```typescript
// Function Types
function add(x: number, y: number): number {
  return x + y;
}

let myAdd: (x: number, y: number) => number = function(x: number, y: number): number { 
  return x + y; 
};

// Optional and Default Parameters
function buildName(firstName: string, lastName?: string): string {
  if (lastName)
    return firstName + " " + lastName;
  else
    return firstName;
}

function buildName2(firstName: string, lastName = "Smith"): string {
  return firstName + " " + lastName;
}

// Rest Parameters
function buildName3(firstName: string, ...restOfName: string[]): string {
  return firstName + " " + restOfName.join(" ");
}

// Overloads
function pickCard(x: {suit: string; card: number; }[]): number;
function pickCard(x: number): {suit: string; card: number; };
function pickCard(x: any): any {
  if (typeof x == "object") {
    let pickedCard = Math.floor(Math.random() * x.length);
    return pickedCard;
  }
  else if (typeof x == "number") {
    let pickedSuit = Math.floor(x / 13);
    return { suit: suits[pickedSuit], card: x % 13 };
  }
}
```

## Generics

```typescript
function identity<T>(arg: T): T {
  return arg;
}

interface GenericIdentityFn<T> {
  (arg: T): T;
}

class GenericNumber<T> {
  zeroValue: T;
  add: (x: T, y: T) => T;
}

// Generic Constraints
interface Lengthwise {
  length: number;
}

function loggingIdentity<T extends Lengthwise>(arg: T): T {
  console.log(arg.length);
  return arg;
}

// Using Type Parameters in Generic Constraints
function getProperty<T, K extends keyof T>(obj: T, key: K) {
  return obj[key];
}
```

## Union and Intersection Types

```typescript
// Union Types
function padLeft(value: string, padding: string | number) {
  if (typeof padding === "number") {
    return Array(padding + 1).join(" ") + value;
  }
  if (typeof padding === "string") {
    return padding + value;
  }
  throw new Error(`Expected string or number, got '${padding}'.`);
}

// Intersection Types
interface ErrorHandling {
  success: boolean;
  error?: { message: string };
}

interface ArtworksData {
  artworks: { title: string }[];
}

type ArtworksResponse = ArtworksData & ErrorHandling;
```

## Type Guards and Type Predicates

```typescript
function isFish(pet: Fish | Bird): pet is Fish {
  return (pet as Fish).swim !== undefined;
}

function isNumber(x: any): x is number {
  return typeof x === "number";
}

// in operator
function move(pet: Fish | Bird) {
  if ("swim" in pet) {
    return pet.swim();
  }
  return pet.fly();
}

// typeof guards
function padLeft2(value: string, padding: string | number) {
  if (typeof padding === "number") {
    return Array(padding + 1).join(" ") + value;
  }
  if (typeof padding === "string") {
    return padding + value;
  }
}

// instanceof guards
class Bird {
  fly() { console.log("bird fly"); }
  layEggs() { console.log("bird lay eggs"); }
}

class Fish {
  swim() { console.log("fish swim"); }
  layEggs() { console.log("fish lay eggs"); }
}

function getRandomPet(): Fish | Bird {
  return Math.random() > 0.5 ? new Bird() : new Fish();
}

let pet = getRandomPet();
if (pet instanceof Bird) {
  pet.fly();
}
if (pet instanceof Fish) {
  pet.swim();
}
```

## Advanced Types

```typescript
// Mapped Types
type Partial<T> = {
  [P in keyof T]?: T[P];
}

type Readonly<T> = {
  readonly [P in keyof T]: T[P];
}

type Pick<T, K extends keyof T> = {
  [P in K]: T[P];
}

type Record<K extends keyof any, T> = {
  [P in K]: T;
}

// Conditional Types
type TypeName<T> =
  T extends string ? "string" :
  T extends number ? "number" :
  T extends boolean ? "boolean" :
  T extends undefined ? "undefined" :
  T extends Function ? "function" :
  "object";

// Template Literal Types
type EmailLocaleIDs = "welcome_email" | "email_heading";
type FooterLocaleIDs = "footer_title" | "footer_sendoff";
type AllLocaleIDs = `${EmailLocaleIDs | FooterLocaleIDs}_id`;

// Key Remapping
type Getters<Type> = {
  [Property in keyof Type as `get${Capitalize<string & Property>}`]: () => Type[Property]
};
```

## Utility Types

```typescript
// Partial<Type>
interface Todo {
  title: string;
  description: string;
}

function updateTodo(todo: Todo, fieldsToUpdate: Partial<Todo>) {
  return { ...todo, ...fieldsToUpdate };
}

// Required<Type>
type RequiredTodo = Required<Partial<Todo>>;

// Readonly<Type>
type ReadonlyTodo = Readonly<Todo>;

// Record<Keys, Type>
type CatName = "miffy" | "boris" | "mordred";
type CatInfo = { age: number; breed: string };
const cats: Record<CatName, CatInfo> = {
  miffy: { age: 10, breed: "Persian" },
  boris: { age: 5, breed: "Maine Coon" },
  mordred: { age: 16, breed: "British Shorthair" },
};

// Pick<Type, Keys>
type TodoPreview = Pick<Todo, "title" | "completed">;

// Omit<Type, Keys>
type TodoPreview2 = Omit<Todo, "description">;

// Exclude<UnionType, ExcludedMembers>
type T0 = Exclude<"a" | "b" | "c", "a">;

// Extract<Type, Union>
type T1 = Extract<"a" | "b" | "c", "a" | "f">;

// NonNullable<Type>
type T2 = NonNullable<string | number | undefined>;

// Parameters<Type>
declare function f1(arg: { a: number; b: string }): void;
type T3 = Parameters<typeof f1>;

// ConstructorParameters<Type>
class C {
  constructor(a: number, b: string) {}
}
type T4 = ConstructorParameters<typeof C>;

// ReturnType<Type>
declare function f1(): { a: number; b: string };
type T5 = ReturnType<typeof f1>;

// InstanceType<Type>
type T6 = InstanceType<typeof C>;
```

## Enums

```typescript
enum Direction {
  Up = 1,
  Down,
  Left,
  Right,
}

enum Direction2 {
  Up = "UP",
  Down = "DOWN",
  Left = "LEFT", 
  Right = "RIGHT",
}

// Const enums
const enum Directions {
  Up,
  Down,
  Left,
  Right
}

// Ambient enums
declare enum Enum {
  A = 1,
  B,
  C = 2
}
```

## Modules

```typescript
// Export
export interface StringValidator {
  isAcceptable(s: string): boolean;
}

export const numberRegexp = /^[0-9]+$/;

export class ZipCodeValidator implements StringValidator {
  isAcceptable(s: string) {
    return s.length === 5 && numberRegexp.test(s);
  }
}

// Default exports
export default class Calculator {
  add(x: number, y: number): number {
    return x + y;
  }
}

// Re-exports
export { ZipCodeValidator as RegExpBasedZipCodeValidator } from "./ZipCodeValidator";
export * from "./StringValidator";

// Import
import { StringValidator } from "./StringValidator";
import { StringValidator as SV } from "./StringValidator";
import * as validator from "./StringValidator";
import "./my-module.js";

// Dynamic imports
async function getZipCodeValidator() {
  const { ZipCodeValidator } = await import("./ZipCodeValidator");
  return new ZipCodeValidator();
}
```

## Namespaces

```typescript
namespace Validation {
  export interface StringValidator {
    isAcceptable(s: string): boolean;
  }

  const lettersRegexp = /^[A-Za-z]+$/;
  const numberRegexp = /^[0-9]+$/;

  export class LettersOnlyValidator implements StringValidator {
    isAcceptable(s: string) {
      return lettersRegexp.test(s);
    }
  }

  export class ZipCodeValidator implements StringValidator {
    isAcceptable(s: string) {
      return s.length === 5 && numberRegexp.test(s);
    }
  }
}

// Multi-file namespaces
/// <reference path="Validation.ts" />
namespace Validation {
  export class NumberValidator implements StringValidator {
    isAcceptable(s: string) {
      return !isNaN(Number(s));
    }
  }
}

// Aliases
namespace Shapes {
  export namespace Polygons {
    export class Triangle { }
    export class Square { }
  }
}

import polygons = Shapes.Polygons;
let sq = new polygons.Square();
```

## Decorators

```typescript
// Class Decorators
function sealed(constructor: Function) {
  Object.seal(constructor);
  Object.seal(constructor.prototype);
}

@sealed
class Greeter2 {
  greeting: string;
  constructor(message: string) {
    this.greeting = message;
  }
  greet() {
    return "Hello, " + this.greeting;
  }
}

// Method Decorators
function enumerable(value: boolean) {
  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {
    descriptor.enumerable = value;
  };
}

class Greeter3 {
  greeting: string;
  constructor(message: string) {
    this.greeting = message;
  }

  @enumerable(false)
  greet() {
    return "Hello, " + this.greeting;
  }
}

// Property Decorators
function format(formatString: string) {
  return function (target: any, propertyKey: string): any {
    // property decorator
  };
}

class Greeter4 {
  @format("Hello, %s")
  greeting: string;

  constructor(message: string) {
    this.greeting = message;
  }
  greet() {
    let formatString = getFormat(this, "greeting");
    return formatString.replace("%s", this.greeting);
  }
}

// Parameter Decorators
function required(target: Object, propertyKey: string | symbol, parameterIndex: number) {
  let existingRequiredParameters: number[] = Reflect.getOwnMetadata(requiredMetadataKey, target, propertyKey) || [];
  existingRequiredParameters.push(parameterIndex);
  Reflect.defineMetadata(requiredMetadataKey, existingRequiredParameters, target, propertyKey);
}

class Greeter5 {
  greeting: string;

  constructor(message: string) {
    this.greeting = message;
  }

  greet(@required name: string) {
    return "Hello " + name + ", " + this.greeting;
  }
}
```

## Declaration Merging

```typescript
// Interface Merging
interface Box {
  height: number;
  width: number;
}

interface Box {
  scale: number;
}

let box: Box = { height: 5, width: 6, scale: 10 };

// Namespace Merging
namespace Animals {
  export class Zebra { }
}

namespace Animals {
  export interface Legged {
    numberOfLegs: number;
  }
  export class Dog { }
}

// Module Augmentation
declare module "./observable" {
  interface Observable<T> {
    map<U>(f: (x: T) => U): Observable<U>;
  }
}

// Global Augmentation
declare global {
  interface Array<T> {
    toObservable(): Observable<T>;
  }
}
```

## Triple-Slash Directives

```typescript
/// <reference path="..." />
/// <reference types="..." />
/// <reference lib="..." />
/// <amd-module name="..." />
/// <amd-dependency path="..." />
```

## JSX

```typescript
declare namespace JSX {
  interface Element extends React.ReactElement<any, any> { }
  interface ElementClass extends React.Component<any> {
    render(): React.ReactNode;
  }
  interface ElementAttributesProperty { props: {}; }
  interface ElementChildrenAttribute { children: {}; }

  interface IntrinsicElements {
    a: React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;
    div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>;
    // ... other HTML elements
  }
}
```

## Compiler Options (tsconfig.json)

```json
{
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["ES2020", "DOM"],
    "module": "CommonJS",
    "moduleResolution": "node",
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "strictBindCallApply": true,
    "strictPropertyInitialization": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitOverride": true,
    "declaration": true,
    "declarationMap": true,
    "sourceMap": true,
    "outDir": "./dist",
    "rootDir": "./src",
    "removeComments": true,
    "noEmitOnError": true,
    "preserveConstEnums": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist"]
}
```

## Built-in Types

```typescript
// Global types
type Partial<T> = { [P in keyof T]?: T[P] | undefined; }
type Required<T> = { [P in keyof T]-?: T[P]; }
type Readonly<T> = { readonly [P in keyof T]: T[P]; }
type Pick<T, K extends keyof T> = { [P in K]: T[P]; }
type Record<K extends keyof any, T> = { [P in K]: T; }
type Exclude<T, U> = T extends U ? never : T;
type Extract<T, U> = T extends U ? T : never;
type Omit<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>;
type NonNullable<T> = T extends null | undefined ? never : T;
type Parameters<T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never;
type ConstructorParameters<T extends abstract new (...args: any) => any> = T extends abstract new (...args: infer P) => any ? P : never;
type ReturnType<T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any;
type InstanceType<T extends abstract new (...args: any) => any> = T extends abstract new (...args: any) => infer R ? R : any;
type ThisParameterType<T> = T extends (this: infer U, ...args: any[]) => any ? U : unknown;
type OmitThisParameter<T> = unknown extends ThisParameterType<T> ? T : T extends (...args: infer A) => infer R ? (...args: A) => R : T;
type ThisType<T> = {};

// String manipulation types
type Uppercase<S extends string> = intrinsic;
type Lowercase<S extends string> = intrinsic;
type Capitalize<S extends string> = intrinsic;
type Uncapitalize<S extends string> = intrinsic;

// Promise types
interface Promise<T> {
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): Promise<TResult1 | TResult2>;
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

type Awaited<T> = T extends null | undefined ? T : T extends object & { then(onfulfilled: infer F): any } ? F extends ((value: infer V, ...args: any) => any) ? Awaited<V> : never : T;
```

## Type Manipulation Examples

```typescript
// keyof operator
type Point = { x: number; y: number };
type P = keyof Point; // "x" | "y"

// typeof operator
let s = "hello";
let n: typeof s; // string

// Indexed access types
type Person = { age: number; name: string; alive: boolean };
type Age = Person["age"]; // number
type I1 = Person["age" | "name"]; // string | number
type I2 = Person[keyof Person]; // string | number | boolean

// Template literal types
type World = "world";
type Greeting = `hello ${World}`; // "hello world"

type EmailLocaleIDs2 = "welcome_email" | "email_heading";
type FooterLocaleIDs2 = "footer_title" | "footer_sendoff";
type AllLocaleIDs2 = `${EmailLocaleIDs2 | FooterLocaleIDs2}_id`; // "welcome_email_id" | "email_heading_id" | "footer_title_id" | "footer_sendoff_id"
```